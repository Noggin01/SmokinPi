{"name":"Smokin'Pi","tagline":"Raspberry Pi Based Propane Smoker Controller","body":"# Smokin'Pi \r\nThe Smokin'Pi is a solution to controlling your propane smoker by adjusting the flow of propane via a servo controlled valve.  A needle valve is used to improve the resolution of the controller and to also allow increased torque output from the servo motor.  Control is provided via a web interface.\r\n\r\n## Temperature Monitoring\r\nTemperature monitoring is achieved through the use of multiple thermistor probes.  Since the Raspberry Pi doesn't have any analog inputs available, an ADC IC with SPI communication was chosen.  The selected part is a TI TLC1543IN.\r\n\r\nThe TI TLC1543IN is designed to run from a 5v power rail.  The SPI inputs on the TLC1543IN are compatible with 3.3v signaling, but the outputs are driven to 5v.  Simple circuitry is utilized to ensure that the voltage presented to the Raspberry Pi does not exceed 3.3v.\r\n\r\n## Temperature Control\r\nTemperature control is achieved via a motorized needle valve which limits the flow of propane to the burner.  The propane pressure regulator is still required and the main temperature knob present on the smoker should still be utilized as a manual shutoff.  During the smoking process, the main temperature knob should be left fully open so that the needle valve will be the limiting component.\r\n\r\nA multi-turn servo is physically attached to the handle on the needle valve.  The Raspberry Pi's PWM output is used to control the servo.  Servo signaling is not true PWM as neither the duty cycle nor the frequency of the signal matters.  The control mechanism of the signaling is derived solely from the positive pulse width of the signal.  Despite the fact that the servo control signal isn't truly a PWM signal, a PWM peripheral on the processor is fully capable of driving the servo.\r\n\r\nThe control signals to a servo are not standardized, so on different models of servos, the same pulse widths will result in different physical positions of the servo.  Each model of servo will need to be tested when used in this project.  Testing should be done to determine when the servo is at its physical limits so that the servo will not be instructed to a position beyond its capabilities.  Additional testing is also needed to determine when the servo is at the physical limits of the needle valve.\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}